if(text==null || text.equals("")){
			return emptArray;
		}
		Matcher m = linkPattern.matcher(text);
		while(m.find()) {
			System.out.println(m.group(1));
			if(m.group().contains("|")&& !m.group().contains("Wik")){
				if(m.group(1).endsWith("|")){//"Seattle", "Seattle,_Washington
					System.out.println("in first if"+m.group(1));
					String[] biosplits = m.group(1).trim().split(" ");
					String kingtext;
					
					kingtext=biosplits[0].substring(0,1).toUpperCase()+biosplits[0].substring(1);
					biosplits[0]=biosplits[0].replace(",","").trim();
					String _sum = "";
					//System.out.println(biosplits[1]);
					_sum= kingtext+"_"+biosplits[1].replace("|", "");

					//System.out.println("1"+_sum);
					String lowbiosplit = biosplits[0].toLowerCase();
					//System.out.println("0"+kingtext);
					links.put(_sum.trim(),biosplits[0].trim());
				}else{
					//System.out.println("in first if else");
					String[] splitlink = m.group(1).trim().split("\\|");
					if(splitlink.length==2){//
						if(m.group().contains("media:")){
							links.put("",splitlink[1].trim());

						}else{
							System.out.println("in splitslink");
							if(m.group(1).length()>3){//New York also has public transportation", "Public_transport"
								String [] afterpipe = m.group(1).split("\\|");
								String t = m.group(1)+afterpipe[1];
								String u = afterpipe[0];
								afterpipe[0]=afterpipe[0].substring(0,1).toUpperCase()+afterpipe[0].substring(1);
								String[] afterpipesplits =afterpipe[0].split(" ");
								String sum = "";
								for(int i=0; i<afterpipesplits.length-1;i++){
									sum = afterpipesplits[i]+"_"+afterpipesplits[i+1];
								}
								//System.out.println(sum);
								links.put(sum.trim(),t);
							}else{
								for(String s: splitlink){
									if(s!=null && !s.equals("")){
										links.put(splitlink[0].trim(),splitlink[1].trim());
									}
								}}
						}}}
			}else if(m.group().contains("Wikipedia:")){//Village pump", ""
				Matcher mw = WikipedialinkPattern.matcher(text);
				System.out.println("here in wikipedia");

				while(mw.find()){
					if(mw.group().contains("#")){
						String text2 ="";
						text2= mw.group(2).replace("|", " ").trim();
						links.put("",text2);
						text2="";
					}else{
						String text2 ="";
						text2= mw.group(3).replace("|", " ").trim();
						if(text2.contains("(")){
							int i= text2.indexOf("(");
							text2=text2.substring(0,i-1);
						}

					//	System.out.println("here");

					//	System.out.println(text2);
						links.put("",text2);
						text2="";
					}}
			}

			else if(m.group().contains("Wiktionary")){//"Wiktionary:Hello",""
				System.out.println("m .group in tionary is"+m.group());
				if(m.group().contains("|")){
					Matcher mwt = WiktionaryPattern.matcher(text);
					while(mwt.find()){
						String t = mwt.group(3).replace("|","");
						//System.out.println(t);
						links.put("",t);
					}

				}else{
					Matcher mwt = WiktionaryPattern.matcher(text);
					while(mwt.find()){
						String t1 = mwt.group(2);
						links.put("",t1);


					}
				}

			}else if(m.group().contains("Category:")){
				Matcher cmatcher = catPattern.matcher(m.group());
				while(cmatcher.find()) {//"Character sets",""
					String [] cats= m.group().split(":");
					String catlink = cats[1].substring(0,cats[1].length()-2);
					System.out.println(catlink);
					links.put("",catlink);
				}
				if(m.group().contains(":Category:")){//Category:Character sets",""
					String [] cats= m.group().split(":");
					String catlink = cats[1]+":"+cats[2].substring(0,cats[2].length()-2);
					//System.out.println(catlink);
					links.put("",catlink);
				}
			}
			else{System.out.println("in else block");
			//London has public transport
			if(m.group(3).startsWith("es")||m.group(3).startsWith("ru")){
				//System.out.println("here in lang links");
				links.put("",m.group(3));
			}else{
				//System.out.println(m.group());
				if(m.group().contains("File:")){
					String [] filesplits= m.group(3).split("\\|");
					if(filesplits.length==1){
						links.put("", "");
						//System.out.println("here");
					}else{
						links.put("",filesplits[filesplits.length-1]);
					}

				}
				else{
					//System.out.println(m.group());
					String pretext = m.group(1).trim();
					String intext =m.group(3).trim();
					String showtext = pretext+" "+intext;
					String[] _links = intext.split(" ");
					for(int i= 0;i<_links.length-1;i++){
						if(i == 0){
							_links[i]=_links[i].substring(0,1).toUpperCase()+_links[i].substring(1);
						}
						if(i!=_links.length){
							_links[i]+="_";
						}

					}
					String _sum = "";
					for(String s : _links)
						_sum+=s;
					links.put(_sum.trim(),showtext.trim());

				}	}}
			for (Map.Entry<String, String> key : links.entrySet())
			{
				returnArr[1]=key.getKey();
				returnArr[0]=key.getValue();
			}

			for(String s : returnArr){
				System.out.println(s);
			}

		}
		Matcher m2 = linkwithtextinendPattern.matcher(text);
		while(m2.find()){//"A micro-second", "Micro-"
			if(m2.group().contains("<nowiki />")){
				System.out.println(m2.group(1));
				System.out.println(m2.group(2));
				System.out.println(m2.group(3));
				String [] afternowiki = m2.group(2).split(">");
				String t1 = m2.group(1).trim()+" "+m2.group(3)+ ""+afternowiki[1];
				String cleanlink = m2.group(3);
				cleanlink=cleanlink.substring(0,1).toUpperCase()+cleanlink.substring(1);
				links.put(cleanlink, t1);

			}else{
				//System.out.println("here"+m2.group(1)+":"+m2.group(2)+":"+m2.group(3));
				String clean = "";
				if(m2.group(2).contains("[")){
					int i= m2.group(2).indexOf("[");
					int j = m2.group(2).indexOf("]");
					int z = m2.group(2).indexOf("]");
					clean=m2.group(2).substring(i+2,j)+m2.group(2).substring(z+2,m2.group(2).length());

				}
			//	System.out.println("clean"+clean);
				String text3 = m2.group(1)+clean;
				//System.out.println(text3);
				String cleanlink = m2.group(3);
				cleanlink=cleanlink.substring(0,1).toUpperCase()+cleanlink.substring(1);
				String[] afterpipesplits =cleanlink.split(" ");
				String sum = "";
				for(int i=0; i<afterpipesplits.length-1;i++){
					sum = afterpipesplits[i]+"_"+afterpipesplits[i+1];
				}
				//System.out.println(sum);
				links.put(sum,text3);
			}for (Map.Entry<String, String> key : links.entrySet())
			{
				returnArr[1]=key.getKey();
				returnArr[0]=key.getValue();
			}
/*
			for(String s : returnArr){
				System.out.println(s);
			}*/

		}
		Matcher mh = httplinkPattern.matcher(text);
		while(mh.find()){
			String [] httpsplits = mh.group(1).split(" ");
			if(httpsplits.length>=2){
				links.put("",httpsplits[1]);
				//System.out.println(httpsplits[1]);
			}else{
				links.put("", "");
			}
			for (Map.Entry<String, String> key : links.entrySet())
			{
				returnArr[1]=key.getKey();
				returnArr[0]=key.getValue();
			}
			/*
			for(String s : returnArr){
				System.out.println(s);
			}*/
		}
		if(returnArr[1]!=null){// ADDING lINK to WIKIPEDIA DOC
			linkcoll.add(returnArr[1]);
			aftlink.append(returnArr[0]);
		}
		System.out.println("section text  after going out of links in links"+ aftlink.toString());
		